{"version":3,"sources":["components/common/FormsControl/FormsControl.module.sass","utils/validators/validators.js","components/common/FormsControl/FormsControl.js","components/Login/Login.jsx"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","Element","input","meta","props","hasError","touched","error","className","classNames","styles","formControl","setClasses","errorMsg","Textarea","Input","createField","component","type","placeholder","name","validate","innerText","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,uCAAuC,SAAW,iC,iCCD3K,oEAAO,IAAMC,EAAW,SAAAC,GAEpB,OAAMA,OACF,EAGO,YAIFC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,OAAIA,GAASA,EAAMG,OAASD,EAClB,iBAAN,OAAwBA,EAAxB,iBAGA,K,wNCTFE,EAAU,SAAAA,GAAO,OAAI,YAAgC,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASC,EAAY,gCAOhDC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACE,yBAAKC,UARY,SAACH,GAAc,IAAD,EAC7B,OAAOI,KAAU,mBACZC,IAAOC,aAAc,GADT,cAEZD,IAAOH,MAAQF,GAFH,IAOFO,CAAWP,IAC1B,kBAAC,EAAD,iBAAaH,EAAWE,IACtBC,GAAY,yBAAKG,UAAWE,IAAOG,UAAWV,EAAKI,UAKhDO,EAAWb,EAAQ,YAEnBc,EAASd,EAAQ,SAEjBe,EAAc,SAACC,EAAUC,EAAKC,EAAYC,EAAKC,EAASC,GAA1C,OAAwD,6BAAK,kBAAC,IAAD,CAAOL,UAAWA,EAAWC,KAAMA,EAAMC,YAAaA,EAAaC,KAAMA,EAAMC,SAAUA,IAAaC,K,iCC1B9L,+FAmBMC,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EAVL,SAAC,GAA0B,IAAzBE,EAAwB,EAAxBA,aAAanB,EAAW,EAAXA,MAC7B,OAAO,0BAAMoB,SAAUD,GAClBV,YAAYD,IAAO,OAAQ,QAAS,QAAS,CAACnB,MAC9CoB,YAAYD,IAAO,WAAY,WAAY,WAAY,CAACnB,MACxDoB,YAAYD,IAAO,WAAY,KAAM,aAAc,GAAI,eACtDR,GAAS,yBAAKC,UAAWE,IAAOkB,kBAAmBrB,GACrD,6BAAK,8CA2BEsB,uBAJS,SAAAC,GAAK,MAAK,CAC9BC,OAAQD,EAAME,KAAKD,UAGiB,CAAEE,WAA3BJ,EAnBD,SAACzB,GAKX,OAAIA,EAAM2B,OACC,kBAAC,IAAD,CAAUG,GAAI,aAGlB,6BACH,qCACA,kBAACX,EAAD,CAAgBI,SATH,SAACQ,GACd/B,EAAM6B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.b09054a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__1Di2Y\",\"error\":\"FormsControl_error__fDZcL\",\"formSummaryError\":\"FormsControl_formSummaryError__km0ML\",\"errorMsg\":\"FormsControl_errorMsg__Pt-Lf\"};","export const required = value => {\r\n\r\n    if (!!value) {\r\n        return undefined\r\n    }\r\n    else {\r\n        return 'required'\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) {\r\n        return `max length is ${maxLength} symbols`\r\n    }\r\n    else {\r\n        return undefined\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport styles from './FormsControl.module.sass'\r\nimport classNames from 'classnames' // https://github.com/JedWatson/classnames\r\nimport { Field } from 'redux-form'\r\n\r\n\r\nconst Element = Element => ({ input, meta, ...props }) => {\r\n    const setClasses = (hasError) => {\r\n        return classNames({\r\n            [styles.formControl]: true,\r\n            [styles.error]: hasError\r\n        })\r\n    };\r\n    const hasError = meta.touched && meta.error; //  meta.touched Если один раз зашёл в форму и вышел из неё, если есть ошибка. meta.error если есть ошибка формы.\r\n    return (\r\n      <div className={ setClasses(hasError) }>\r\n        <Element {...input} {...props} />\r\n        { hasError && <div className={styles.errorMsg}>{meta.error}</div> }\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport const Textarea = Element(\"textarea\");\r\n\r\nexport const Input =  Element(\"input\");\r\n\r\nexport const createField = (component,type,placeholder,name,validate,innerText) => <div><Field component={component} type={type} placeholder={placeholder} name={name} validate={validate} />{innerText}</div>","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { reduxForm } from 'redux-form'\r\nimport { required } from '../../utils/validators/validators'\r\nimport { createField, Input } from '../common/FormsControl/FormsControl'\r\nimport { login } from '../../redux/reducer_auth'\r\nimport { Redirect } from 'react-router-dom'\r\nimport styles from '../../components/common/FormsControl/FormsControl.module.sass'\r\n\r\nconst LoginForm = ({handleSubmit,error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {createField(Input, 'text', 'Email', 'email', [required])}\r\n        {createField(Input, 'password', 'Password', 'password', [required])}\r\n        {createField(Input, 'checkbox', null, 'rememberMe', [], 'Remember me')}\r\n        { error && <div className={styles.formSummaryError}>{error}</div>}\r\n        <div><button>Login</button></div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login)\r\n\r\n"],"sourceRoot":""}